Q.1.Implement Binary Search
function binarySearch(arr, target) {
    let left = 0;
    let right = arr.length - 1;

    while (left <= right) {
        const mid = Math.floor((left + right) / 2);

        if (arr[mid] === target) {
            return mid;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return -1;
}

// Example usage:
const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const target1 = 5;
console.log(binarySearch(arr1, target1)); // Output: 4



Q.2.Implement Merge Sort
function mergeSort(arr) {
    if (arr.length <= 1) {
        return arr;
    }

    const mid = Math.floor(arr.length / 2);
    const left = mergeSort(arr.slice(0, mid));
    const right = mergeSort(arr.slice(mid));

    return merge(left, right);
}

function merge(left, right) {
    let result = [];
    let leftIndex = 0;
    let rightIndex = 0;

    while (leftIndex < left.length && rightIndex < right.length) {
        if (left[leftIndex] < right[rightIndex]) {
            result.push(left[leftIndex]);
            leftIndex++;
        } else {
            result.push(right[rightIndex]);
            rightIndex++;
        }
    }

    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
}

// Example usage:
const arr2 = [4, 1, 5, 3, 2];
console.log(mergeSort(arr2)); // Output: [1, 2, 3, 4, 5]



Q.3.Implement Quick Sort
function quickSort(arr) {
    if (arr.length <= 1) {
        return arr;
    }

    const pivot = arr[arr.length - 1];
    const left = [];
    const right = [];

    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i] < pivot) {
            left.push(arr[i]);
        } else {
            right.push(arr[i]);
        }
    }

    return [...quickSort(left), pivot, ...quickSort(right)];
}

// Example usage:
const arr3 = [4, 1, 5, 3, 2];
console.log(quickSort(arr3)); // Output: [1, 2, 3, 4, 5]


Q.4.Implement Insertion Sort
function insertionSort(arr) {
    for (let i = 1; i < arr.length; i++) {
        let key = arr[i];
        let j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
    return arr;
}

// Example usage:
const arr4 = [4, 1, 5, 3, 2];
console.log(insertionSort(arr4)); // Output: [1, 2, 3, 4, 5]


Q.5.Sort list of strings (similar to that of dictionary)
function dictionarySort(arr) {
    return arr.sort((a, b) => a.localeCompare(b));
}

// Example usage:
const arr5 = ["apple", "banana", "grape", "cherry", "fig"];
console.log(dictionarySort(arr5)); // Output: ["apple", "banana", "cherry", "fig", "grape"]


Q.5.Example usage for all the functions combined:
// Binary Search
const binarySearchArr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const binarySearchTarget = 5;
console.log(binarySearch(binarySearchArr, binarySearchTarget)); // Output: 4

// Merge Sort
const mergeSortArr = [4, 1, 5, 3, 2];
console.log(mergeSort(mergeSortArr)); // Output: [1, 2, 3, 4, 5]

// Quick Sort
const quickSortArr = [4, 1, 5, 3, 2];
console.log(quickSort(quickSortArr)); // Output: [1, 2, 3, 4, 5]

// Insertion Sort
const insertionSortArr = [4, 1, 5, 3, 2];
console.log(insertionSort(insertionSortArr)); // Output: [1, 2, 3, 4, 5]

// Dictionary Sort
const dictionarySortArr = ["apple", "banana", "grape", "cherry", "fig"];
console.log(dictionarySort(dictionarySortArr)); // Output: ["apple", "banana", "cherry", "fig", "grape"]
